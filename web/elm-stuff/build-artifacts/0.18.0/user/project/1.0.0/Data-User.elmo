var _user$project$Data_User$ignoreResponseBody = _elm_lang$http$Http$expectStringResponse(
	function (response) {
		var d = A2(_elm_lang$core$Debug$log, 'response', response);
		return _elm_lang$core$Result$Ok(
			{ctor: '_Tuple0'});
	});
var _user$project$Data_User$encodeUser = function (user) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'userId',
				_1: _elm_lang$core$Json_Encode$int(user.userId)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'userFirstName',
					_1: _elm_lang$core$Json_Encode$string(user.userFirstName)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'userLastName',
						_1: _elm_lang$core$Json_Encode$string(user.userLastName)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'password',
							_1: _elm_lang$core$Json_Encode$string(user.userPassword)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Data_User$User = F4(
	function (a, b, c, d) {
		return {userId: a, userFirstName: b, userLastName: c, userPassword: d};
	});
var _user$project$Data_User$decodeUser = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'userPassword',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'userLastName',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'userFirstName',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'userId',
				_elm_lang$core$Json_Decode$int,
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Data_User$User)))));
var _user$project$Data_User$getUsers = _elm_lang$http$Http$request(
	{
		method: 'GET',
		headers: {ctor: '[]'},
		url: A2(
			_elm_lang$core$String$join,
			'/',
			{
				ctor: '::',
				_0: '',
				_1: {
					ctor: '::',
					_0: 'users',
					_1: {ctor: '[]'}
				}
			}),
		body: _elm_lang$http$Http$emptyBody,
		expect: _elm_lang$http$Http$expectJson(
			_elm_lang$core$Json_Decode$list(_user$project$Data_User$decodeUser)),
		timeout: _elm_lang$core$Maybe$Nothing,
		withCredentials: false
	});
var _user$project$Data_User$getUserById = function (capture_id) {
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {ctor: '[]'},
			url: A2(
				_elm_lang$core$String$join,
				'/',
				{
					ctor: '::',
					_0: '',
					_1: {
						ctor: '::',
						_0: 'user',
						_1: {
							ctor: '::',
							_0: _elm_lang$http$Http$encodeUri(
								_elm_lang$core$Basics$toString(capture_id)),
							_1: {ctor: '[]'}
						}
					}
				}),
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectJson(
				_elm_lang$core$Json_Decode$maybe(_user$project$Data_User$decodeUser)),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
