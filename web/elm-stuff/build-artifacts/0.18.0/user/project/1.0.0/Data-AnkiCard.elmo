var _user$project$Data_AnkiCard$encodeAnkiCard = function (card) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'cardId',
				_1: _elm_lang$core$Json_Encode$int(card.cardId)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'contentEn',
					_1: _elm_lang$core$Json_Encode$string(card.contentEn)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'contentJpKanji',
						_1: _elm_lang$core$Json_Encode$string(card.contentJpKanji)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'contentJp',
							_1: _elm_lang$core$Json_Encode$string(card.contentJp)
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '_Tuple2',
								_0: 'contextEn',
								_1: _elm_lang$core$Json_Encode$string(card.contextEn)
							},
							_1: {
								ctor: '::',
								_0: {
									ctor: '_Tuple2',
									_0: 'contextJP',
									_1: _elm_lang$core$Json_Encode$string(card.contextJP)
								},
								_1: {
									ctor: '::',
									_0: {
										ctor: '_Tuple2',
										_0: 'property',
										_1: _elm_lang$core$Json_Encode$string(card.property)
									},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Data_AnkiCard$AnkiCard = F7(
	function (a, b, c, d, e, f, g) {
		return {cardId: a, contentEn: b, contentJpKanji: c, contentJp: d, contextEn: e, contextJP: f, property: g};
	});
var _user$project$Data_AnkiCard$decodeAnkiCard = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'property',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'contextJP',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'contextEn',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'contentJp',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'contentJpKanji',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'contentEn',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'cardId',
							_elm_lang$core$Json_Decode$int,
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Data_AnkiCard$AnkiCard))))))));
var _user$project$Data_AnkiCard$getAnkis = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$http$Http$request(
		{
			method: 'GET',
			headers: {
				ctor: '::',
				_0: A2(
					_elm_lang$http$Http$header,
					'Authorization',
					A2(_elm_lang$core$Basics_ops['++'], 'Bearer ', _p1._0)),
				_1: {ctor: '[]'}
			},
			url: A2(
				_elm_lang$core$String$join,
				'/',
				{
					ctor: '::',
					_0: '',
					_1: {
						ctor: '::',
						_0: 'anki',
						_1: {ctor: '[]'}
					}
				}),
			body: _elm_lang$http$Http$emptyBody,
			expect: _elm_lang$http$Http$expectJson(
				_elm_lang$core$Json_Decode$list(_user$project$Data_AnkiCard$decodeAnkiCard)),
			timeout: _elm_lang$core$Maybe$Nothing,
			withCredentials: false
		});
};
var _user$project$Data_AnkiCard$postAnkis = F2(
	function (_p2, body) {
		var _p3 = _p2;
		return _elm_lang$http$Http$request(
			{
				method: 'POST',
				headers: {
					ctor: '::',
					_0: A2(
						_elm_lang$http$Http$header,
						'Authorization',
						A2(_elm_lang$core$Basics_ops['++'], 'Bearer ', _p3._0)),
					_1: {ctor: '[]'}
				},
				url: A2(
					_elm_lang$core$String$join,
					'/',
					{
						ctor: '::',
						_0: '',
						_1: {
							ctor: '::',
							_0: 'ankis',
							_1: {ctor: '[]'}
						}
					}),
				body: _elm_lang$http$Http$jsonBody(
					_user$project$Data_AnkiCard$encodeAnkiCard(body)),
				expect: _elm_lang$http$Http$expectJson(_user$project$Data_AnkiCard$decodeAnkiCard),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$Data_AnkiCard$getAnkiByCardId = F2(
	function (_p4, capture_cardId) {
		var _p5 = _p4;
		return _elm_lang$http$Http$request(
			{
				method: 'GET',
				headers: {
					ctor: '::',
					_0: A2(
						_elm_lang$http$Http$header,
						'Authorization',
						A2(_elm_lang$core$Basics_ops['++'], 'Bearer ', _p5._0)),
					_1: {ctor: '[]'}
				},
				url: A2(
					_elm_lang$core$String$join,
					'/',
					{
						ctor: '::',
						_0: '',
						_1: {
							ctor: '::',
							_0: 'anki',
							_1: {
								ctor: '::',
								_0: _elm_lang$http$Http$encodeUri(
									_elm_lang$core$Basics$toString(capture_cardId)),
								_1: {ctor: '[]'}
							}
						}
					}),
				body: _elm_lang$http$Http$emptyBody,
				expect: _elm_lang$http$Http$expectJson(
					_elm_lang$core$Json_Decode$maybe(_user$project$Data_AnkiCard$decodeAnkiCard)),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
var _user$project$Data_AnkiCard$putAnkiByCardId = F3(
	function (_p6, capture_cardId, body) {
		var _p7 = _p6;
		return _elm_lang$http$Http$request(
			{
				method: 'PUT',
				headers: {
					ctor: '::',
					_0: A2(
						_elm_lang$http$Http$header,
						'Authorization',
						A2(_elm_lang$core$Basics_ops['++'], 'Bearer ', _p7._0)),
					_1: {ctor: '[]'}
				},
				url: A2(
					_elm_lang$core$String$join,
					'/',
					{
						ctor: '::',
						_0: '',
						_1: {
							ctor: '::',
							_0: 'anki',
							_1: {
								ctor: '::',
								_0: _elm_lang$http$Http$encodeUri(
									_elm_lang$core$Basics$toString(capture_cardId)),
								_1: {ctor: '[]'}
							}
						}
					}),
				body: _elm_lang$http$Http$jsonBody(
					_user$project$Data_AnkiCard$encodeAnkiCard(body)),
				expect: _elm_lang$http$Http$expectJson(
					_elm_lang$core$Json_Decode$maybe(_user$project$Data_AnkiCard$decodeAnkiCard)),
				timeout: _elm_lang$core$Maybe$Nothing,
				withCredentials: false
			});
	});
