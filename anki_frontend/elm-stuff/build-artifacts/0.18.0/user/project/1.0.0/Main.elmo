var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$getPage = function (pageState) {
	var _p0 = pageState;
	if (_p0.ctor === 'Loaded') {
		return _p0._0;
	} else {
		return _p0._0;
	}
};
var _user$project$Main$decodeUserFromJson = function (json) {
	return A2(
		_elm_lang$core$Maybe$andThen,
		function (_p1) {
			return _elm_lang$core$Result$toMaybe(
				A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Data_User$decodeUser, _p1));
		},
		_elm_lang$core$Result$toMaybe(
			A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$core$Json_Decode$string, json)));
};
var _user$project$Main_ops = _user$project$Main_ops || {};
_user$project$Main_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _user$project$Main$Model = F2(
	function (a, b) {
		return {session: a, pageState: b};
	});
var _user$project$Main$Errored = function (a) {
	return {ctor: 'Errored', _0: a};
};
var _user$project$Main$NotFound = {ctor: 'NotFound'};
var _user$project$Main$FlashCard = function (a) {
	return {ctor: 'FlashCard', _0: a};
};
var _user$project$Main$Home = function (a) {
	return {ctor: 'Home', _0: a};
};
var _user$project$Main$Login = function (a) {
	return {ctor: 'Login', _0: a};
};
var _user$project$Main$initialPage = _user$project$Main$Login(_user$project$Page_Login$initialModel);
var _user$project$Main$Blank = {ctor: 'Blank'};
var _user$project$Main$TransitioningFrom = function (a) {
	return {ctor: 'TransitioningFrom', _0: a};
};
var _user$project$Main$Loaded = function (a) {
	return {ctor: 'Loaded', _0: a};
};
var _user$project$Main$pageErrored = F3(
	function (model, activePage, errorMessage) {
		var error = A2(_user$project$Page_Errored$pageLoadError, activePage, errorMessage);
		return A2(
			_user$project$Main_ops['=>'],
			_elm_lang$core$Native_Utils.update(
				model,
				{
					pageState: _user$project$Main$Loaded(
						_user$project$Main$Errored(error))
				}),
			_elm_lang$core$Platform_Cmd$none);
	});
var _user$project$Main$FlashCardLoaded = function (a) {
	return {ctor: 'FlashCardLoaded', _0: a};
};
var _user$project$Main$setRoute = F2(
	function (maybeRoute, model) {
		var errored = _user$project$Main$pageErrored(model);
		var transition = F2(
			function (toMsg, task) {
				return A2(
					_user$project$Main_ops['=>'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$Main$TransitioningFrom(
								_user$project$Main$getPage(model.pageState))
						}),
					A2(_elm_lang$core$Task$attempt, toMsg, task));
			});
		var _p2 = maybeRoute;
		if (_p2.ctor === 'Nothing') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				_elm_lang$core$Native_Utils.update(
					model,
					{
						pageState: _user$project$Main$Loaded(_user$project$Main$NotFound)
					}),
				{ctor: '[]'});
		} else {
			switch (_p2._0.ctor) {
				case 'Home':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								pageState: _user$project$Main$Loaded(
									_user$project$Main$Home(_user$project$Page_Home$initialModel))
							}),
						{ctor: '[]'});
				case 'Login':
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								pageState: _user$project$Main$Loaded(
									_user$project$Main$Login(_user$project$Page_Login$initialModel))
							}),
						{ctor: '[]'});
				default:
					return A2(
						transition,
						_user$project$Main$FlashCardLoaded,
						_user$project$Page_FlashCard$init(model.session));
			}
		}
	});
var _user$project$Main$init = F2(
	function (val, location) {
		var d = A2(_elm_lang$core$Debug$log, 'check: ', location);
		return A2(
			_user$project$Main$setRoute,
			_user$project$Route$fromLocation(location),
			{
				pageState: _user$project$Main$Loaded(_user$project$Main$initialPage),
				session: {
					user: _user$project$Main$decodeUserFromJson(val)
				}
			});
	});
var _user$project$Main$auth = function (_p3) {
	var _p4 = _p3;
	var _p6 = _p4._0;
	var _p5 = _p6.session.user;
	if (_p5.ctor === 'Nothing') {
		return A2(
			_user$project$Main$setRoute,
			_elm_lang$core$Maybe$Just(_user$project$Route$Login),
			_p6);
	} else {
		return {ctor: '_Tuple2', _0: _p6, _1: _p4._1};
	}
};
var _user$project$Main$FlashCardMsg = function (a) {
	return {ctor: 'FlashCardMsg', _0: a};
};
var _user$project$Main$HomeMsg = function (a) {
	return {ctor: 'HomeMsg', _0: a};
};
var _user$project$Main$LoginMsg = function (a) {
	return {ctor: 'LoginMsg', _0: a};
};
var _user$project$Main$viewPage = F3(
	function (session, isLoading, page) {
		var _p7 = page;
		switch (_p7.ctor) {
			case 'NotFound':
				return _user$project$Page_NotFound$view(session);
			case 'Blank':
				return _elm_lang$html$Html$text('blank');
			case 'Login':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$LoginMsg,
					A2(_user$project$Page_Login$view, session, _p7._0));
			case 'Home':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$HomeMsg,
					A2(_user$project$Page_Home$view, session, _p7._0));
			case 'FlashCard':
				return A2(
					_elm_lang$html$Html$map,
					_user$project$Main$FlashCardMsg,
					A2(_user$project$Page_FlashCard$view, session, _p7._0));
			default:
				return A2(_user$project$Page_Errored$view, session, _p7._0);
		}
	});
var _user$project$Main$view = function (model) {
	var d = A2(_elm_lang$core$Debug$log, 'page state: ', model.pageState);
	var _p8 = model.pageState;
	if (_p8.ctor === 'Loaded') {
		return A3(_user$project$Main$viewPage, model.session, false, _p8._0);
	} else {
		return A3(_user$project$Main$viewPage, model.session, true, _p8._0);
	}
};
var _user$project$Main$updatePage = F3(
	function (page, msg, model) {
		var toPage = F5(
			function (toModel, toMsg, subUpdate, subMsg, subModel) {
				var _p9 = A2(subUpdate, subMsg, subModel);
				var newModel = _p9._0;
				var newCmd = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							pageState: _user$project$Main$Loaded(
								toModel(newModel))
						}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, toMsg, newCmd)
				};
			});
		var session = model.session;
		var d = _elm_lang$core$Debug$log('in update page');
		var _p10 = {ctor: '_Tuple2', _0: msg, _1: page};
		_v6_7:
		do {
			_v6_6:
			do {
				switch (_p10._0.ctor) {
					case 'SetRoute':
						return A2(_user$project$Main$setRoute, _p10._0._0, model);
					case 'FlashCardLoaded':
						if (_p10._0._0.ctor === 'Ok') {
							return A2(
								_user$project$Main_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$FlashCard(_p10._0._0._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						} else {
							return A2(
								_user$project$Main_ops['=>'],
								_elm_lang$core$Native_Utils.update(
									model,
									{
										pageState: _user$project$Main$Loaded(
											_user$project$Main$Errored(_p10._0._0._0))
									}),
								_elm_lang$core$Platform_Cmd$none);
						}
					case 'HomeMsg':
						switch (_p10._1.ctor) {
							case 'Home':
								return A5(
									toPage,
									_user$project$Main$Home,
									_user$project$Main$HomeMsg,
									_user$project$Page_Home$update(session),
									_p10._0._0,
									_p10._1._0);
							case 'NotFound':
								break _v6_6;
							default:
								break _v6_7;
						}
					case 'FlashCardMsg':
						switch (_p10._1.ctor) {
							case 'FlashCard':
								return A5(
									toPage,
									_user$project$Main$FlashCard,
									_user$project$Main$FlashCardMsg,
									_user$project$Page_FlashCard$update(session),
									_p10._0._0,
									_p10._1._0);
							case 'NotFound':
								break _v6_6;
							default:
								break _v6_7;
						}
					default:
						switch (_p10._1.ctor) {
							case 'Login':
								var _p11 = A2(_user$project$Page_Login$update, _p10._0._0, _p10._1._0);
								var pageModel = _p11._0._0;
								var cmd = _p11._0._1;
								var msgFromPage = _p11._1;
								var newModel = function () {
									var _p12 = msgFromPage;
									return model;
								}();
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										newModel,
										{
											pageState: _user$project$Main$Loaded(
												_user$project$Main$Login(pageModel))
										}),
									_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Main$LoginMsg, cmd)
								};
							case 'NotFound':
								break _v6_6;
							default:
								break _v6_7;
						}
				}
			} while(false);
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{ctor: '[]'});
		} while(false);
		return A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			model,
			{ctor: '[]'});
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		return A3(
			_user$project$Main$updatePage,
			_user$project$Main$getPage(model.pageState),
			msg,
			model);
	});
var _user$project$Main$SetRoute = function (a) {
	return {ctor: 'SetRoute', _0: a};
};
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$programWithFlags,
	function (_p13) {
		return _user$project$Main$SetRoute(
			_user$project$Route$fromLocation(_p13));
	},
	{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})(_elm_lang$core$Json_Decode$value);
